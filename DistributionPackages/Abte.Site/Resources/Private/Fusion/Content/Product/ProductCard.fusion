prototype(Abte.Site:Content.ProductCard) < prototype(Neos.Neos:ContentComponent) {

    node = ${ node }    
    @context {
        node = ${ this.node }
    }

    title = Neos.Neos:Editable {
        property = 'title'
        node = ${ node}
    }

    subTitle = Neos.Neos:Editable {
        property = 'subTitle'
        node = ${ node}
    }

    description = Neos.Neos:Editable {
        property = 'description'
        node = ${ node}
    }

    price = Neos.Neos:Editable {
        property = 'price'
        node = ${ node }
    }

    discount = ${ q(node).parents('[instanceof Abte.Site:Content.Products]').property('discount') }

    priceOnly = ${ q(node).property('price') }

    productGroup = ''

    // itemID = ${ String.replace( q(node).property('_nodeName') , 'node-', '') }
    itemID = ${ q(node).property('_identifier') }

    backgroundColor = ${ q(node).property('bgColor') }

    // relative bg-white border rounded-lg shadow-sm p-4 flex cursor-pointer focus:outline-none border-transparent border-indigo-500 ring-2 ring-indigo-500
    // 'block': (active === '" + props.activeItem + "')
    renderer = afx`
        <div class="productCard">
            <label 
                id={props.itemID}
                class={'product cursor-pointer cardItem text-black transition duration-250 bg-base-200 space-y-4 hover:opacity-100'}
                :class={"{ 'opacity-60': !(value" + props.productGroup + " === '" + props.itemID + "'), 'opacity-100': (active === '" + props.itemID + "') }"}
                x-radio-group-option=""
                x-init={"value" + props.productGroup + "= localStorage.getItem('" + props.productGroup + "');"}
                x-on:change={"localStorage.setItem('" + props.productGroup + "', value" + props.productGroup + "); $dispatch('item-changed');" }
                data-group={props.productGroup}
                data-price={String.pregMatch(props.priceOnly,'/\d+/')}
            >
              <div class="flex flex-1">
                    <div class="flex flex-col w-full">
                        <div class="w-full flex space-x-4 relative border-b-[1px] pb-4 mb-4 border-black">
                            <Abte.Site:Component.isHero node={node} />
                            <Abte.Site:Component.SelectedProduct activeItem={props.itemID} productGroup={props.productGroup} class="absolute right-0" />
                        </div>

                        <div class="flex items-center justify-between px-5 py-2 mb-2 -mx-5 text-white bg-black"
                            @if.hasRabatt={props.discount}
                        >
                            <div>
                                <p class="mb-0 text-sm text-accent">Rabatt<br/>
                                <b>als Neukunde</b></p>
                            </div>
                            <div>
                                <div class="text-xl font-light">{props.discount}%</div>
                            </div>
                        </div>

                        <div class="mb-0 text-black h2">{props.title}</div>
                        <div class="h3 font-extrabold !mt-0">{props.subTitle}</div>
                        <div class="description">{props.description}</div>
                        <div class="price">
                            <div class="text-sm font-extrabold">Preis pro Monat</div>
                            <div class="text-lg">{props.price}</div>
                        </div>
                    </div>
                </div>
                <input 
                    type="radio" 
                    value={props.itemID} 
                    x-model={"value"+ props.productGroup}
                    name={props.itemID} 
                    class="sr-only"
                />                
            </label>
        </div>
    `

    @cache {
        mode = 'cached'
        entryIdentifier {
            collection = ${node}
        }
        entryTags {
            1 = ${Neos.Caching.descendantOfTag(node)}
            2 = ${Neos.Caching.nodeTag(node)}
			3 = ${Neos.Caching.nodeTypeTag('Abte.Site:Content.Products', documentNode)}
        }
        maximumLifetime = ${q(node).context({'invisibleContentShown': true}).children().cacheLifetime()}
    }
}


prototype(Abte.Site:Component.SelectedProduct) < prototype(Neos.Fusion:Component) {
    
    node = ${ node }
    @context {
        node = ${ this.node }
    }

    class = ''

    productGroup = ''
    activeItem = ''

    checkIcon = Abte.Site:Icon.Check
   
    renderer = afx`
        <div 
            class={props.class + ' ' + 'w-8 h-8 rounded-full flex justify-center items-center bg-white' }
        >
            <div
            :class={"{ 'hidden': !(value"+ props.productGroup+" === '" + props.activeItem + "'), 'block': (active === '" + props.activeItem + "') }"}
            >{props.checkIcon}</div>
        </div>

    `
}

prototype(Abte.Site:Component.isHero) < prototype(Neos.Fusion:Component) {
    
    node = ${ node }
    @context {
        node = ${ this.node }
    }

    class = ''

    isHero = ${ q(node).property('isHero') }

    checkIcon = Abte.Site:Icon.Check
    plusIcon = Abte.Site:Icon.Plus
    
    renderer = afx`
        <div 
            class={props.isHero ? (props.class + ' ' + 'isHero text-sm flex justify-center bg-accent rounded-2xl px-2 py-1 space-x-4') : (props.class + ' ' + 'opacity-0 isHero text-sm flex justify-center bg-accent rounded-2xl px-2 py-1 space-x-4') }
        >
            <div>
            Bestseller</div><Abte.Site:Icon.Star />
        </div>
    `
}
