prototype(Abte.Site:Content.Button) < prototype(Neos.Neos:ContentComponent) {
        
    class = 'text-lg bg-primary'
    outerClass = 'block'
    buttonClass = 'flex tracking-normal px-4 py-2 font-extrabold flex-row items-center space-x-2 rounded-full bg-accent'
    
    icon = ''
    iconClass = 'text-secondary relative group-hover:left-2 duration-300'
    iconPosition = ${ q(node).property('iconPosition') ? true : false }
    
    style = ${ q(node).property('hollow') ? this.onDark + ' ' + '' : this.onDark + ' text-primary bg-none' }
    onDark = ${ q(node).property('onDark') ? 'text-primary' : null }

    conditionalShow = ${ false }

    text = Neos.Neos:Editable {
        property = 'text'
        block = ${ false }
    }

    @context {
        icon = ${ this.icon }
    }

    target = ${ q(node).property('target') }
    // target.@process.convertUris = Neos.Neos:ConvertUris {
    //     forceConversion = true
    // }

    iconBefore = Abte.Site:Icon.ArrowRight {
        class='relative left-0 text-white duration-300 group-hover:left-2'
        @if.buttonIsBefore=${this.positionBefore}
        @if.hasIcon=${icon}
    }

    iconAfter = Abte.Site:Icon.ArrowRight {
        class='relative left-0 text-white duration-300 group-hover:left-2'
        @if.buttonIsBefore=${!this.positionBefore}
        @if.hasIcon=${icon}
    }

    blank = ${ q(node).property('blank') ? true : false }

    renderer = afx`
        <div class={props.outerClass}
            x-data="{showBtn:false}"
            x-show="showBtn"
            x-show.@if={props.conditionalShow}
            "@addresslookup-error.window"="showBtn = false"
            "@addresslookup-success.window"="showBtn = true"
            "@addresslookup-error".@if={props.conditionalShow}
            "@addresslookup-success".@if={props.conditionalShow}
        >
            <div class="inline-block group">
                <Carbon.Link:Link 
                    additionalClass={'cursor-pointer' + ' ' + props.buttonClass + ' ' + props.class + ' ' + props.style} 
                    link={props.target} 
                    renderDefaultTagIfNoLink='true' 
                >
                    {props.iconBefore}
                    <span>{props.text}</span>
                    {props.iconAfter}
                </Carbon.Link:Link>
            </div>
        </div>
    `
}
