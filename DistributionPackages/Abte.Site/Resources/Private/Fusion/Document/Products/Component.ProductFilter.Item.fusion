prototype(Selfix.Navigation:Component.ProductFilter.Item) < prototype(Neos.Fusion:Component) {

    filterProperty =''
    filterTitle = ''
    filterItems = ''
    itemsSeparatedList = ''
    noMatch = ''
    unit = ''
    label = ''
    items = ${ q(documentNode).children('[instanceof Abte.Site:Document.Product]').get() }

    @context {
        filterProperty = ${ this.filterProperty }
        unit = ${ this.unit }
        items = ${ this.items }
    }

    filterItems = Neos.Fusion:Loop {
        items = Neos.Fusion:Map {
            items = ${ items }
            itemRenderer = ${ q(item).property(filterProperty) }
            iterationName = 'i'
            @process.sortArray = ${ Array.sort(value) }
            @process.removeDuplicates = ${ Array.unique(value) }
            @process.removeEmtpy = ${ Array.filter(value, (x, index) => x != '') }
        }
        iterationName = 'i'
        itemRenderer = Selfix.Navigation:Component.ProductFilter.LI {
            node=${ item }
            item=${ item }
        }
    }    
    itemsSeparatedList = Neos.Fusion:Loop {
        items = Neos.Fusion:Map {
            items = ${ items }
            itemRenderer = ${ q(item).property(filterProperty) }
            iterationName = 'i'
            @process.sortArray = ${ Array.sort(value) }
            @process.removeDuplicates = ${ Array.unique(value) }
            @process.removeEmtpy = ${ Array.filter(value, (x, index) => x != '') }
        }
        iterationName = 'i'
        itemRenderer = ${ !i.isLast ? '"' + item + ' ' + unit + '",' : '"' + item + ' ' + unit + '"' }
    }    

    renderer = afx`

<!-- https://codepen.io/adamwathan/pen/BaoOExx?editors=1010 -->

        <div
            x-data="Components.customSelect({ open: false, value: 1, selected: 1 })"
            x-init="init()"
        >

            <div class="relative">
                <span class="inline-block w-full">
                    <!-- <div class="text-sm text-primary">{props.filterTitle}</div> -->
                    <button 
                        x-ref="button" 
                        "@click"="onButtonClick()" 
                        type="button" 
                        class="text-base md:text-lg !tracking-normal relative z-0 w-full h-8 md:h-10 lg:h-12 lg:py-2 pl-3 pr-10 text-left transition duration-150 ease-in-out bg-white border-2 cursor-default border-primary focus:outline-none focus:shadow-outline-blue focus:border-blue-300 sm:text-sm sm:leading-5"
                    >
                        <div class="flex items-center space-x-3">
                            <span x-text={"[" + '"' + props.filterTitle + '",' + props.itemsSeparatedList + "][value - 1]"} class="block truncate">
                                { props.filterTitle }
                            </span>
                        </div>
                        <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" fill-rule="evenodd"></path>
                            </svg>
                        </span>
                    </button>
                </span>

                <div
                    x-cloak
                    x-show="open"
                    "@focusout"="onEscape()" 
                    "@click.away"="open = false" 
                    x-description="Select popover, show/hide based on select state." 
                    x-transition:enter="transition duration-150"
                    x-transition:enter-start="opacity-0"
                    x-transition:enter-end="opacity-100"
                    x-transition:leave="transition duration-150"
                    x-transition:leave-start="opacity-100"
                    x-transition:leave-end="opacity-0"
                    class="absolute z-40 w-full overflow-auto text-base leading-6 bg-white shadow-lg top-12 max-h-60 focus:outline-none sm:text-sm sm:leading-5"
                >
                <div id="mixitup-tab" class="hidden"></div>

                    <ul
                        "@keydown.enter.stop.prevent"="onOptionSelect()" 
                        "@keydown.space.stop.prevent"="onOptionSelect()" 
                        "@keydown.escape"="onEscape()" 
                        "@keydown.arrow-up.prevent"="onArrowUp()" 
                        "@keydown.arrow-down.prevent"="onArrowDown()"
                        x-ref="listbox" tabindex="-1" role="listbox"
                        tabindex="-1"
                        class="overflow-auto text-base leading-6 shadow-xs max-h-60 focus:outline-none sm:text-sm sm:leading-5"
                    >
                        <li
                            data-filter={ '.' + Carbon.String.urlize('fil-' + filterProperty) }
                            class="relative py-2 pl-3 cursor-default select-none pr-9"
                            "@click"="choose(1)"
                        >
                            { I18n.translate('Abte.Site:Main:all') }
                        </li>
                        {props.filterItems}
                    </ul>
                </div>
            </div>

        </div>

    `
}


prototype(Selfix.Navigation:Component.ProductFilter.LI) < prototype(Neos.Fusion:Component) {

    node = ${ node }

    title = ''
    
    @context {
        node = ${ this.node }
        item = ${ this.item }
    }

    renderer = afx`
        <li
            id={'option-' + filterProperty + '-' + (i.cycle + 1) }
            data-filter={ '.' + Carbon.String.urlize('fil-' + item + ' ' + filterProperty) }
            role="option" 
            "@click"={'choose(' + (i.cycle + 1) + ')'}
            "@mouseenter"={'selected = ' + (i.cycle + 1) }
            "@mouseleave"="selected = null" 
            :class={"{ 'text-white bg-primary': selected === " + (i.cycle + 1) + ", 'text-primary': !(selected === " + (i.cycle + 1) + ") }"}
            class="relative py-2 pl-3 cursor-default select-none pr-9"
        >
            <span 
                class="block font-normal truncate"
            >{item + ' ' + unit}</span>
            <span
                x-show={'value === ' + (i.cycle + 1) }
                :class={"{ 'text-white': selected === " + (i.cycle + 1) + ", 'text-primary': !(selected === " + (i.cycle + 1) + ") }"}
                class="absolute inset-y-0 right-0 flex items-center pr-4 text-primary"
            >
                <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                        clip-rule="evenodd"/>
                </svg>
            </span>
        </li>

    `
}
